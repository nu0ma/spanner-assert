name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: false
        type: string

jobs:
  release:
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       contains(github.event.pull_request.labels.*.name, 'Release')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    strategy:
      matrix:
        node-version: [22]
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 10.19.0

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '${{ matrix.node-version }}'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Get package info
        id: package
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ] && [ -n "$INPUT_VERSION" ]; then
            VERSION="$INPUT_VERSION"
            # Validate version format
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "‚ùå Invalid semver format: $VERSION"
              echo "Expected format: X.Y.Z (e.g., 1.2.3)"
              exit 1
            fi
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: tag-check
        env:
          VERSION: ${{ steps.package.outputs.version }}
        run: |
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies
        if: steps.tag-check.outputs.exists == 'false'
        run: pnpm install --frozen-lockfile

      - name: Build package
        if: steps.tag-check.outputs.exists == 'false'
        run: pnpm run build

      - name: Verify build output
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Build failed - dist/index.js not found"
            exit 1
          fi
          echo "‚úÖ Build verification successful"

      - name: Publish to npm with provenance
        if: steps.tag-check.outputs.exists == 'false'
        run: pnpm publish --provenance --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release with tag
        id: create-release
        if: steps.tag-check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_BODY: ${{ github.event.pull_request.body }}
          EVENT_NAME: ${{ github.event_name }}
          VERSION: ${{ steps.package.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            RELEASE_URL=$(gh release create "v${VERSION}" \
              --title "v${VERSION}" \
              --target "${COMMIT_SHA}" \
              --generate-notes)
          else
            # Save PR body to file safely using environment variable
            printf '%s\n' "$PR_BODY" > release_notes.md
            RELEASE_URL=$(gh release create "v${VERSION}" \
              --title "v${VERSION}" \
              --target "${COMMIT_SHA}" \
              --notes-file release_notes.md)
          fi
          echo "url=$RELEASE_URL" >> "$GITHUB_OUTPUT"

      - name: Comment on PR - Success
        if: |
          always() &&
          github.event_name == 'pull_request' &&
          steps.tag-check.outputs.exists == 'false' &&
          success()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VERSION: ${{ steps.package.outputs.version }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          RELEASE_URL: ${{ steps.create-release.outputs.url }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          gh pr comment "${PR_NUMBER}" \
            --body "‚úÖ **Release v${VERSION} completed successfully!**

          - üì¶ npm package: https://www.npmjs.com/package/${PACKAGE_NAME}/v/${VERSION}
          - üè∑Ô∏è GitHub Release: ${RELEASE_URL}
          - üîó Workflow run: ${SERVER_URL}/${REPOSITORY}/actions/runs/${RUN_ID}"

      - name: Comment on PR - Tag Exists
        if: |
          always() &&
          github.event_name == 'pull_request' &&
          steps.tag-check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VERSION: ${{ steps.package.outputs.version }}
        run: |
          gh pr comment "${PR_NUMBER}" \
            --body "‚ö†Ô∏è **Release skipped**: Tag v${VERSION} already exists

          Please check the existing release or update the version in package.json."

      - name: Comment on PR - Failure
        if: |
          always() &&
          github.event_name == 'pull_request' &&
          steps.tag-check.outputs.exists == 'false' &&
          failure()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VERSION: ${{ steps.package.outputs.version }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          gh pr comment "${PR_NUMBER}" \
            --body "‚ùå **Release v${VERSION} failed**

          Please check the workflow logs for details.
          üîó Workflow run: ${SERVER_URL}/${REPOSITORY}/actions/runs/${RUN_ID}"
