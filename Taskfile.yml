version: "3"

vars:
  PROJECT: '{{default "e2e-project" .ENV.SPANNER_PROJECT}}'
  INSTANCE: '{{default "e2e-instance" .ENV.SPANNER_INSTANCE}}'
  DATABASE: '{{default "e2e-database" .ENV.SPANNER_DATABASE}}'
  EMULATOR_PORT: '{{default "9010" .ENV.SPANNER_EMULATOR_PORT}}'
  EMULATOR_HOST: '{{default (printf "127.0.0.1:%s" .EMULATOR_PORT) .ENV.SPANNER_EMULATOR_HOST}}'
  EMULATOR_ADMIN_PORT: '{{default "9020" .ENV.SPANNER_EMULATOR_ADMIN_PORT}}'
  EMULATOR_CONTAINER: '{{default "spanner-emulator" .ENV.SPANNER_EMULATOR_CONTAINER}}'
  FIXTURES_DIR: tests/e2e/fixtures
  SCHEMA: '{{printf "%s/schema/schema.sql" .FIXTURES_DIR}}'
  PLAYWRIGHT_CONFIG: playwright.config.ts

env:
  SPANNER_PROJECT: "{{.PROJECT}}"
  SPANNER_INSTANCE: "{{.INSTANCE}}"
  SPANNER_DATABASE: "{{.DATABASE}}"
  SPANNER_EMULATOR_PORT: "{{.EMULATOR_PORT}}"
  SPANNER_EMULATOR_HOST: "{{.EMULATOR_HOST}}"
  SPANNER_EMULATOR_ADMIN_PORT: "{{.EMULATOR_ADMIN_PORT}}"
  GOOGLE_CLOUD_PROJECT: "{{.PROJECT}}"
  CLOUDSDK_API_ENDPOINT_OVERRIDES_SPANNER: '{{printf "http://127.0.0.1:%s/" .EMULATOR_ADMIN_PORT}}'

tasks:
  build:
    desc: Build TypeScript output
    cmds:
      - pnpm run build

  lint:
    desc: Run ESLint
    cmds:
      - pnpm run lint

  typecheck:
    desc: Run TypeScript type checker
    cmds:
      - pnpm run typecheck

  emulator:up:
    desc: Start Cloud Spanner emulator container
    cmds:
      - |
        docker rm -f {{.EMULATOR_CONTAINER}} >/dev/null 2>&1 || true
      - |
        docker run -d --rm \
          -p {{.EMULATOR_PORT}}:9010 \
          -p {{.EMULATOR_ADMIN_PORT}}:9020 \
          --name {{.EMULATOR_CONTAINER}} \
          gcr.io/cloud-spanner-emulator/emulator
      - task: emulator:wait

  emulator:wait:
    desc: Wait for emulator port to become available
    cmds:
      - |
        bash -c 'for i in {1..30}; do nc -z 127.0.0.1 {{.EMULATOR_PORT}} && exit 0; sleep 1; done; echo "Spanner emulator did not become ready" >&2; exit 1'

  emulator:down:
    desc: Stop Cloud Spanner emulator container
    cmds:
      - |
        docker rm -f {{.EMULATOR_CONTAINER}} >/dev/null 2>&1 || true

  emulator:setup:
    desc: Create instance and database schema on emulator using wrench
    cmds:
      - |
        SPANNER_PROJECT_ID={{.PROJECT}} \
        SPANNER_INSTANCE_ID={{.INSTANCE}} \
        SPANNER_EMULATOR_HOST={{.EMULATOR_HOST}} \
        wrench instance create || true
      - |
        sh -c 'tmp=$(mktemp -d); cp {{.SCHEMA}} $tmp/schema.sql; \
        SPANNER_PROJECT_ID={{.PROJECT}} \
        SPANNER_INSTANCE_ID={{.INSTANCE}} \
        SPANNER_EMULATOR_HOST={{.EMULATOR_HOST}} \
        wrench create --database={{.DATABASE}} --directory=$tmp --schema_file=schema.sql || true'

  test:emulator:
    desc: Run e2e tests against the Spanner emulator
    deps:
      - build
    cmds:
      - |
        set -euo pipefail
        task emulator:up
        trap 'task emulator:down >/dev/null 2>&1 || true' EXIT
        task emulator:setup
        pnpm run test:e2e

  test:playwright:
    desc: Run Playwright tests against the Spanner emulator
    deps:
      - build
    cmds:
      - |
        set -euo pipefail
        task emulator:up
        trap 'task emulator:down >/dev/null 2>&1 || true' EXIT
        task emulator:setup
        pnpm exec playwright test --config {{.PLAYWRIGHT_CONFIG}}
